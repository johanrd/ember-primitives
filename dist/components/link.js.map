{"version":3,"file":"link.js","sources":["../../src/components/link.gts"],"sourcesContent":["/**\n * TODO: make template-only component,\n * and use class-based modifier?\n *\n * This would require that modifiers could run pre-render\n */ import { template } from \"@ember/template-compiler\";\nimport { hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport { link } from '../helpers/link.ts';\nimport { ExternalLink } from './external-link.gts';\nimport type { TOC } from '@ember/component/template-only';\nexport interface Signature {\n    Element: HTMLAnchorElement;\n    Args: {\n        /**\n     * the `href` string value to set on the anchor element.\n     */ href: string;\n        /**\n     * When calculating the \"active\" state of the link, you may decide\n     * whether or not you want to _require_ that all query params be considered (true)\n     * or specify individual query params, ignoring anything not specified.\n     *\n     * For example:\n     *\n     * ```gjs live preview\n     * import { Link } from 'ember-primitives';\n     *\n     * <template>\n     *   <Link @href=\"/\" @includeActiveQueryParams={{true}} as |a|>\n     *     ...\n     *   </Link>\n     * </template>\n     * ```\n     *\n     * the data-active state here will only be \"true\" on\n     * - `/`\n     * - `/?foo=2`\n     * - `/?foo=&bar=`\n     *\n     */ includeActiveQueryParams?: true | string[];\n        /**\n     * When calculating the \"active\" state of the link, you may decide\n     * whether or not you want to consider sub paths to be active when\n     * child routes/urls are active.\n     *\n     * For example:\n     *\n     * ```gjs live preview\n     * import { Link } from 'ember-primitives';\n     *\n     * <template>\n     *   <Link @href=\"/forum/1\" @activeOnSubPaths={{true}} as |a|>\n     *     ...\n     *   </Link>\n     * </template>\n     * ```\n     *\n     * the data-active state here will be \"true\" on\n     * - `/forum/1`\n     * - `/forum/1/posts`\n     * - `/forum/1/posts/comments`\n     * - `/forum/1/*etc*`\n     *\n     * if `@activeOnSubPaths` is set to false or left off\n     * the data-active state here will only be \"true\" on\n     * - `/forum/1`\n     *\n     */ activeOnSubPaths?: true;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * Indicates if the passed `href` is pointing to an external site.\n         * Useful if you want your links to have additional context for when\n         * a user is about to leave your site.\n         *\n         * For example:\n         *\n         * ```gjs live preview\n         * import { Link } from 'ember-primitives';\n         *\n         * const MyLink = <template>\n         *   <Link @href={{@href}} as |a|>\n         *     {{yield}}\n         *     {{#if a.isExternal}}\n         *       âžš\n         *     {{/if}}\n         *   </Link>\n         * </template>;\n         *\n         * <template>\n         *   <MyLink @href=\"https://developer.mozilla.org\">MDN</MyLink> &nbsp;&nbsp;\n         *   <MyLink @href=\"/\">Home</MyLink>\n         *  </template>\n         * ```\n         */ isExternal: boolean;\n                /**\n         * Indicates if the passed `href` is *active*, or the user is on the same basepath.\n         * This allows consumers to style their link if they wish or style their text.\n         * The active state will also be present on a `data-active` attribute on the generated anchor tag.\n         *\n         *\n         * For example\n         * ```gjs\n         * import { Link, service } from 'ember-primitives';\n         *\n         * const MyLink = <template>\n         *   <Link @href=\"...\"> as |a|>\n         *     <span class=\"{{if a.isActive 'underline'}}\">\n         *     {{yield}}\n         *     </span>\n         *   </Link>\n         * </template>\n         *\n         * <template>\n         * {{#let (service 'router') as |router|}}\n         *     <MyLink @href={{router.currentURL}}>Ths page</MyLink> &nbsp;&nbsp;\n         *     <MyLink @href=\"/\">Home</MyLink>\n         *   {{/let}}\n         *  </template>\n         * ```\n         *\n         * By default, the query params are omitted from `isActive` calculation, but you may\n         * configure the query params to be included if you wish\n         * See: `@includeActiveQueryParams`\n         *\n         * By default, only the exact route/url is considered for the `isActive` calculation,\n         * but you may configure sub routes/paths to also be considered active\n         * See: `@activeOnSubPaths`\n         *\n         * Note that external links are never active.\n         */ isActive: boolean;\n            }];\n    };\n}\n/**\n * A light wrapper around the [Anchor element][mdn-a], which will appropriately make your link an external link if the passed `@href` is not on the same domain.\n *\n *\n * [mdn-a]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n */ export const Link: TOC<Signature> = template(`\n  {{#let (link @href includeActiveQueryParams=@includeActiveQueryParams activeOnSubPaths=@activeOnSubPaths) as |l|}}\n    {{#if l.isExternal}}\n      <ExternalLink href={{@href}} ...attributes>\n        {{yield (hash isExternal=true isActive=false)}}\n      </ExternalLink>\n    {{else}}\n      <a\n        data-active={{l.isActive}}\n        href={{if @href @href \"##missing##\"}}\n        {{on \"click\" l.handleClick}}\n        ...attributes\n      >\n        {{yield (hash isExternal=false isActive=l.isActive)}}\n      </a>\n    {{/if}}\n  {{/let}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport default Link;\n//# sourceMappingURL=data:application/json;base64,"],"names":["Link","setComponentTemplate","precompileTemplate","strictMode","scope","link","ExternalLink","hash","on","templateOnly"],"mappings":";;;;;;;;AAAA;;;;;;AAkJA;;;;;;MAMaA,IAAU,GAAAC,oBAAA,CAAaC,kBAAA,CAiBpC,ogBAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAC,IAAA;IAAAC,YAAA;IAAAC,IAAA;AAAAC,IAAAA,EAAAA;AAAA,GAAA,CAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA;;;;"}